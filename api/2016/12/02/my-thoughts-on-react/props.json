{
  "dateUnix": 1480672800000,
  "dateFormatted": "Friday 2 Dec 2016",
  "pageHeading": "My thoughts on React",
  "pagePath": "/2016/12/02/my-thoughts-on-react/",
  "innerHTML": "<p>I’ve been playing with <a href=\"https://facebook.github.io/react/\">React</a> for some time now. React is:</p>\n<blockquote>\n<p>“A JavaScript library for building user interfaces”.</p>\n</blockquote>\n<p>Unlike other libraries something about React just clicked with me. Back in October a client project came along that presented a golden opportunity to develop a web app. I decided to use React, and I now consider myself comfortable in its ecosystem.</p>\n<p>Below this huge logo are some of my thoughts on React.</p>\n<p class=\"b-post__image\"><img src=\"/images/blog/react_logo_og.png\" alt=\"the React logo\"></p>\n\n<p>React has its own <a href=\"https://facebook.github.io/react/docs/jsx-in-depth.html\">JSX syntax</a> for writing components. JSX tightly couples HTML with JavaScript in a readable fashion. It does not adhere to a ‘separation of concerns’ in that regard. Rather, it fully embraces the alternative.</p>\n<p>This isn’t a React tutorial but here are two contrived examples that hopefully illustrate my thoughts later. I present a simple button and toolbar:</p>\n<pre><code class=\"language-jsx\">const Button = props =&gt; {\n  return (\n    &lt;button className=&quot;button&quot; onClick={props.onClick}&gt;{props.label}&lt;/button&gt;\n  );\n};\n</code></pre>\n<pre><code class=\"language-jsx\">const Toolbar = props =&gt; {\n  return (\n    &lt;nav className=&quot;toolbar&quot;&gt;\n      &lt;Button onClick={props.undo} label=&quot;Undo&quot;/&gt;\n      &lt;Button onClick={props.redo} label=&quot;Redo&quot;/&gt;\n    &lt;/nav&gt;\n  );\n};\n</code></pre>\n<p>Apologies for the lack of syntax highlighting.</p>\n<p>There are imperfections to JSX for sure. The <code>class</code> HTML attributes become <code>className</code> for example (the former is a reserved keyword in JavaScript). Components without children must use self-closing tags — flashback to the days of XHTML.</p>\n<p>By the way, if you’ve never used React, the components you define like <code>&lt;Toolbar/&gt;</code> can be re-used like HTML elements in other components. They exist in JSX-world only. When React writes to the DOM it uses your semantic HTML underneath.</p>\n<p>Despite the quirks I’ve fostered a preference for using JSX over HTML templating used by other libraries. Writing <a href=\"https://medium.com/@housecor/react-stateless-functional-components-nine-wins-you-might-have-overlooked-997b0d933dbc#.r9ygr5pbk\">stateless functional components</a> that are presentational-only further satisfies my fondness for readable code. (I’m using <a href=\"http://redux.js.org/\">Redux</a> to manage state. A topic for another day.)</p>\n<h2 id=\"transpiling\">Transpiling</h2>\n<p>JSX is not native JavaScript so it must be transpiled. For this I’m using <a href=\"https://babeljs.io/\">Babel</a>. And with Babel as a dependency comes <del>an excuse</del> the ability to use <a href=\"https://babeljs.io/docs/learn-es2015/\">new JavaScript features</a>. I’ve fallen in love with arrow functions and the rest/spread operator. These things may not be supported in web browsers but we can transpile them away.</p>\n<p>So the necessity to transpile code before it can run is a bit iffy. But it’s trivial for me to write Gulp watch tasks to do this in the background.</p>\n<p>I was flirting with the idea of using <a href=\"https://www.typescriptlang.org/\">TypeScript</a> (or <a href=\"https://flowtype.org/\">Flow</a>). Decided against it. Too much new tech at once and I’d be one of ‘those’ developers.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>I suspect a few readers are already balking over the number of names and acronyms I’ve already dropped. A year ago I wrote <a href=\"https://dbushell.com/2015/02/04/i-dont-do-angular-is-that-ok/\">“I don’t do Angular, is that OK?”</a>. I deliberated over what I should know as a professional front-end developer.</p>\n<p>The piece <a href=\"https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f\">“How it feels to learn JavaScript in 2016”</a> by <em>Jose Aguinaga</em>  sums up this quandary from an amusing, if cynical, perspective shared by many.</p>\n<p>As with all tools and technology some amount of prerequisite knowledge is required. Efficient development of React requires a bit of transpiling and automation know-how. Coding in plain JavaScript requires understanding of web standards. That, in turn, requires computer literacy — and so on up and down the dependency chain. Obviously knowing how to turn on a computer is assumed but to me it seems somewhat arbitrary, or at least highly subjective, where to draw the line.</p>\n<p>I still don’t “do Angular” but now I do do React.</p>\n<p>That’s the worst sentence I’ve ever written.</p>\n<p>Anyway, my point is that rejecting new technology on the premise that it introduces complexity is simply wrong if said tech <em>proves</em> to make life easy for those involved (not drive-by Githubers). For me — and I <del>hope</del> plan for those reading my documentation — React make coding web apps a delightful experience.</p>\n<p>What makes React special is its singular focus on user interface. It doesn’t box you into a framework. It doesn’t force you to solve app architecture problems too early. From my own usage I believe this makes React the most approachable library of its ilk.</p>\n<h2 id=\"one-last-thing-\">One last thing…</h2>\n<p>It would be criminal not to give a shout-out to <a href=\"https://preactjs.com/\">Preact</a>. A magical <em>“fast 3kB alternative to React with the same ES6 API”</em> written by <a href=\"https://github.com/developit\">Jason Miller</a>.</p>\n<p><a href=\"https://vuejs.org/\">Vue</a> and <a href=\"https://github.com/trueadm/inferno\">Inferno</a> are also on my radar.</p>\n",
  "pageExcerpt": "I’ve been playing with React for some time now. React is:\n\n“A JavaScript library for building user interfaces”.\n\nUnlike other libraries something about React just clicked with me. Back in October a client project came along that presented a golden opportunity to develop a web app. I decided to use React, and I now consider myself comfortable […]",
  "pageTitle": "My thoughts on React – David Bushell – Web Design (UK)"
}