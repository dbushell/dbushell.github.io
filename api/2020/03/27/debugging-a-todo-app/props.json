{
  "dateUnix": 1585303200000,
  "dateFormatted": "Friday 27 Mar 2020",
  "pageHeading": "Debugging a Todo App",
  "pagePath": "/2020/03/27/debugging-a-todo-app/",
  "innerHTML": "<p>So lately I’ve been boasting about how easy it is to build <a href=\"/2020/03/05/bundle-a-pwa-as-an-android-app/\">Progressive Web Apps</a>. I’ve been dogfooding my glorified todo app <strong>Mute Swan</strong> for weeks thinking it was perfect (bug-free) and quite possibly a game changer, if I dare say.</p>\n<p>As it turns out these things are not so easy to test. This week I squashed a bug that I may never have noticed.</p>\n<h2 id=\"daylight-savings\">Daylight Savings</h2>\n<p>Earlier in the week I noticed that tasks assigned to Monday, 30th March would also appear under Sunday 29th. Here’s a GIF:</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\"\n    src=\"/images/blog/2020/muteswan-datebug.gif\"\n    alt=\"Mute Swan daylight savings bug\"\n    width=\"320\"\n    height=\"419\">\n</p>\n\n<p>I had my suspicions. I Googled “when do the clocks change” as is tradition. 29th March is guilty this time of year in the UK. Now I have a clue as to why this bug exists; time to debug.</p>\n<p>Mute Swan tasks are stored by ID in a single state object. Each task has a unix timestamp. This time is set to midnight for the day they’re assigned. When the list for each day is rendered the state is filtered by a 24 hour range:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> tasks <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">task</span> <span class=\"token operator\">=></span>\n    task<span class=\"token punctuation\">.</span>unix <span class=\"token operator\">>=</span> startTime <span class=\"token operator\">&amp;&amp;</span> task<span class=\"token punctuation\">.</span>unix <span class=\"token operator\">&lt;</span> endTime\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Using “today” as an example, I start the range at midnight:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> startDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstartDate<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Then add 24 hours to get the end of the range:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> endDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>\n  startDate<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">86400000</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>That seemed to work fine. Until the clocks went forward. With this code the <code>endDate</code> for the range on Sunday 29th is <em>one hour past midnight</em> on the 30th. That means any tasks assigned to Monday also appear in the filtered list for Sunday.</p>\n<p>Whoops.</p>\n<p>Now given the Redux nature of my code, if I dragged either of those duplicate tasks into a different day, I’d no longer see two because only the timestamp for a single task ever changed in the state. This was a bug in the selector logic.</p>\n<p>The solution:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> endDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>startDate<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nendDate<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>endDate<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>This technically does the same thing by adding 24 hours to the date. However, when I do <code>endDate.getTime()</code> it will return <code>3600000</code> milliseconds (one hour) less than before. JavaScript Date methods account for daylight savings whereas my naively adding unix time together did not.</p>\n<p>Lesson learned…</p>\n<p>Now that I think about it I remember throwing together an “event countdown” for a client that ended up being off by an hour. I’ve made this mistake before! Thankfully we got that fixed long before attendees arrived on the day.</p>\n<p>I’m blogging this so I don’t forget again.</p>\n",
  "pageExcerpt": "So lately I’ve been boasting about how easy it is to build Progressive Web Apps. I’ve been dogfooding my glorified todo app Mute Swan for weeks thinking it was perfect (bug-free) and quite possibly a game changer, if I dare say.\nAs it turns out these things are not so easy to test. This week I […]",
  "pageDesc": "The one where I debug my progressive web app.",
  "pageTitle": "Debugging a Todo App – David Bushell – Web Design (UK)"
}