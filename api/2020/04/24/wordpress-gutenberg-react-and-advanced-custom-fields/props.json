{
  "dateUnix": 1587722400000,
  "dateFormatted": "Friday 24 Apr 2020",
  "pageHeading": "WordPress Gutenberg: React & Advanced Custom Fields (ACF)",
  "pagePath": "/2020/04/24/wordpress-gutenberg-react-and-advanced-custom-fields/",
  "innerHTML": "<p>The new WordPress Gutenberg editor has been in release for over a year. Post content is composed of “blocks”. Everything is a block. From the humble paragraph to the more advanced gallery and video embed — all blocks.</p>\n<p>There are two common methods to create Gutenberg blocks.</p>\n<p>The first is to follow the <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.wordpress.org/block-editor/tutorials/block-tutorial/writing-your-first-block-type/\">offical handbook</a>. Blocks and the Gutenberg editor itself are written in JavaScript/React at their core. While I consider myself proficient in this area it’s still hard work. The process requires Babel compilation. The documentation is lacking. A single — hard to debug — error can bring down the entire editor.</p>\n<p>I’ve written a lot of Gutenberg React but my preferred method is…</p>\n<h2 id=\"advanced-custom-fields\">Advanced Custom Fields</h2>\n<p>The <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.advancedcustomfields.com/\">ACF plugin</a> is one of the few WordPress plugins that doesn’t make me cry. ACF allows me to register blocks with the usual ACF interface and a PHP template. All the Gutenberg stuff is handle for me.</p>\n<p>This is very nice. If you don’t use ACF, you’re missing out.</p>\n<p>But what if I wanted to combine a native Gutenberg block with an ACF block? Let’s say I want to make a <strong>“Feature Video”</strong> block. It includes an embedded video and some content to the side. Along with a few options to configure styles.</p>\n<p>A single block that renders like this:</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\" srcset=\"\n    /images/blog/2020/gutenberg-acf-2@1x.png,\n    /images/blog/2020/gutenberg-acf-2@2x.png 2x\"\n    src=\"/images/blog/2020/gutenberg-acf-2@1x.png\"\n    alt=\"Preview for an example Gutenberg block with React and Advanced Custom Fields\"\n    width=\"750\"\n    height=\"289\">\n</p>\n\n<p>Gutenberg provide embed blocks with a single caption. These are extremely user-friendly. Users just paste a YouTube link — not even embed code — and WordPress does the rest. However it lacks the additional fields I require.</p>\n<p>ACF does have an <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.advancedcustomfields.com/resources/oembed/\">oEmbed</a> field but it isn’t half as nice. For the sake of this demo I’ve deciding it’s not good enough (it is, I just wanted a simple example).</p>\n<p>Neither method allows me to create the <strong>Feature Video</strong> block to my satisfaction.</p>\n<p>What if I could combine both methods like this:</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\" srcset=\"\n    /images/blog/2020/gutenberg-acf-1@1x.png,\n    /images/blog/2020/gutenberg-acf-1@2x.png 2x\"\n    src=\"/images/blog/2020/gutenberg-acf-1@1x.png\"\n    alt=\"Editor UI for an example Gutenberg block with React and Advanced Custom Fields\"\n    width=\"793\"\n    height=\"556\">\n</p>\n\n<p>In the screenshot above I have a single Gutenberg block that combines a native video embed with ACF fields I can configured.</p>\n<h2 id=\"how-i-created-the-feature-video-block\">How I created the Feature Video block</h2>\n<p>The trick to my <strong>Feature Video</strong> block is <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.wordpress.org/block-editor/developers/block-api/block-templates/\">block templates</a> — but I’ll get to that later.</p>\n<p>First I created an <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://www.advancedcustomfields.com/resources/acf_register_block_type/\">ACF block</a> to handle the custom fields.</p>\n<pre><code class=\"language-php\"><span class=\"token function\">acf_register_block_type</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'name'</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'feature-video-fields'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'title'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'Feature Video Fields'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'mode'</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'edit'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'category'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'theme'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'parent'</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'feature-video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'supports'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span>\n      <span class=\"token single-quoted-string string\">'align'</span>    <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token single-quoted-string string\">'mode'</span>     <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token single-quoted-string string\">'inserter'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token single-quoted-string string\">'reusable'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean constant\">false</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>I’ve omitted a render callback because this inner block has no preview. Note the <code>parent</code>, <code>inserter</code>, and <code>reusable</code> properties. This block is not intended to be used alone. It can only exist within a <code>feature-video</code> block.</p>\n<p>Custom <code>category</code> values must be added via the <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.wordpress.org/reference/hooks/block_categories/\">block categories filter</a>.</p>\n<p>ACF is used as normal to assign fields to this block.</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\" srcset=\"\n    /images/blog/2020/gutenberg-acf-3@1x.png,\n    /images/blog/2020/gutenberg-acf-3@2x.png 2x\"\n    src=\"/images/blog/2020/gutenberg-acf-3@1x.png\"\n    alt=\"Fields UI for an example Gutenberg block with React and Advanced Custom Fields\"\n    width=\"900\"\n    height=\"491\">\n</p>\n\n<h3 id=\"block-templates\">Block Templates</h3>\n<p>The parent <strong>Feature Video</strong> block is created with JavaScript:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>registerBlockType<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@wordpress/blocks'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>InnerBlocks<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@wordpress/block-editor'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>createElement<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@wordpress/element'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">registerBlockType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'theme/feature-video'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">'Feature Video'</span><span class=\"token punctuation\">,</span>\n  category<span class=\"token operator\">:</span> <span class=\"token string\">'theme'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">edit</span><span class=\"token operator\">:</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>InnerBlocks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      template<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'core/embed'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'acf/feature-video-fields'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      templateLock<span class=\"token operator\">:</span> <span class=\"token string\">'all'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">save</span><span class=\"token operator\">:</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>InnerBlocks<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The <strong>edit</strong> function returns a block template that composes the <code>core/embed</code> block with the <code>acf/feature-video-fields</code> block I just created. This composition acts as a single combined block for the user.</p>\n<p>When inserted into the post content (via <strong>save</strong>) the fields block has no HTML render. (I will be using a PHP template for this.) Formatted for readability:</p>\n<pre><code class=\"language-html\"><span class=\"token comment\">&lt;!-- wp:theme/feature-video --></span>\n\n<span class=\"token comment\">&lt;!-- wp:embed {\"url\":\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\"type\":\"video\",\"providerNameSlug\":\"youtube\"} --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>figure</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wp-block-embed is-type-video is-provider-youtube<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wp-block-embed__wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\nhttps://www.youtube.com/watch?v=dQw4w9WgXcQ\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>figure</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- /wp:embed --></span>\n\n<span class=\"token comment\">&lt;!-- wp:acf/feature-video-fields {\"id\":\"block_5ea289f31528c\",\"name\":\"acf/feature-video-fields\",\"data\":{\"heading\":\"Never Gonna Give You Up\",\"introduction\":\"\\u0022Never Gonna Give You Up\\u0022 is a song recorded by British singer and songwriter Rick Astley, released as a single on 27 July 1987. It was written and produced by Stock Aitken Waterman. (Wikipedia)\"}} /--></span>\n\n<span class=\"token comment\">&lt;!-- /wp:theme/feature-video --></span></code></pre>\n<p>To provide a template for <strong>Feature Video</strong> I add a render block filter:</p>\n<pre><code class=\"language-php\"><span class=\"token function\">add_filter</span><span class=\"token punctuation\">(</span>\n  <span class=\"token single-quoted-string string\">'render_block'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token single-quoted-string string\">'render_feature_video_block'</span>\n  <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And the hook callback:</p>\n<pre><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function\">render_feature_video_block</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$html</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$block</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Ignore other blocks</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$block</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'blockName'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token single-quoted-string string\">'theme/feature-video'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$html</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Include, capture, and return the block template</span>\n  <span class=\"token function\">ob_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">locate_template</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"blocks/feature-video.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$html</span> <span class=\"token operator\">=</span> <span class=\"token function\">ob_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ob_end_clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token variable\">$html</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The template path is relative to the WordPress theme.</p>\n<p>Within the template I can access both inner blocks.</p>\n<p>HTML for the <code>core/embed</code> is already rendered:</p>\n<pre><code class=\"language-php\"><span class=\"token comment\">// Get the `core/embed` HTML (&lt;figure class=\"wp-block-embed ...)</span>\n<span class=\"token variable\">$embed</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$block</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'innerBlocks'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'innerHTML'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p>To access the <code>acf/feature-video-fields</code> ACF:</p>\n<pre><code class=\"language-php\"><span class=\"token variable\">$fields</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$block</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'innerBlocks'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Get the block ID and use ACF function</span>\n<span class=\"token variable\">$id</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$fields</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'attrs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$heading</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_field</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'heading'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Or via the nested `data` array</span>\n<span class=\"token variable\">$heading</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$fields</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'attrs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'heading'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p>With the template written my <strong>Feature Video</strong> block is complete.</p>\n<h2 id=\"taking-it-futher-a-preview\">Taking it futher (a preview)</h2>\n<p>You may have noticed something is missing. ACF Gutenberg blocks have a nice Edit/Preview toggle. My block only has an edit mode.</p>\n<p>This functionality can be replicated without too much difficulty. Part of the solution is to add <code>BlockControls</code> to the <code>edit</code> function.</p>\n<p>Something like:</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>BlockControls<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@wordpress/block-editor'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Button<span class=\"token punctuation\">,</span> Toolbar<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@wordpress/components'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyBlockControls</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlockControls</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Toolbar</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>isEditing <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Preview<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">icon</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>visibility<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Edit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">icon</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>edit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Toolbar</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">BlockControls</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>This component can be used to toggle between the block template or preview.</p>\n<p>I’ll leave that as a homework excercise for now!</p>\n<p>I do plan to add full example code to GitHub with this and more. It’s possible to render the preview within an <code>&lt;iframe&gt;</code>. This is very helpful for scoping theme CSS and avoiding conflicts with the WordPress admin styles.</p>\n<p>More on that when I have time…</p>\n",
  "pageExcerpt": "The new WordPress Gutenberg editor has been in release for over a year. Post content is composed of “blocks”. Everything is a block. From the humble paragraph to the more advanced gallery and video embed — all blocks.\nThere are two common methods to create Gutenberg blocks.\nThe first is to follow the offical handbook. Blocks and […]",
  "pageDesc": "The one where I embrace the best of both worlds.",
  "pageTitle": "WordPress Gutenberg: React & Advanced Custom Fields (ACF) – David Bushell – Web Design (UK)"
}