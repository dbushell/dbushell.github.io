{
  "dateUnix": 1591005600000,
  "dateFormatted": "Monday 1 Jun 2020",
  "pageHeading": "Bubblewrap Apps in Android Studio",
  "pagePath": "/2020/06/01/bubblewrap-twa-pwa-apps-android-studio/",
  "innerHTML": "<p><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/GoogleChromeLabs/bubblewrap\">Bubblewrap</a> is a convenient tool to generate an Android app from a Progressive Web App. I used it to <a href=\"/2020/03/05/bundle-a-pwa-as-an-android-app/\">bundle my PWA</a> recently.</p>\n<p>It’s run from the command line:</p>\n<pre><code class=\"language-bash\">bubblewrap init --manifest <span class=\"token string\">\"https://muteswan.app/manifest.webmanifest\"</span></code></pre>\n<p>Bubblewrap generates the build config and assets for the app. Continuing with <code>bubblewrap build</code> results in an <code>.apk</code> if you’ve installed the Android build tools.</p>\n<p>I opted to open the project in <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.android.com/studio/index.html\">Android Studio</a> and poke around. I was able to build a signed <code>.aab</code> bundle — something the Google Play store shows a preference for. I also took the app for a spin on various device emulators.</p>\n<h2 id=\"app-icons\">App Icons</h2>\n<p>Following a small design refresh of <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://muteswan.app/\"><strong>Mute Swan</strong></a> I needed to update and fix the generated icons. On some devices they were clipped awkwardly.</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\" srcset=\"\n    /images/blog/2020/muteswan-icons-broken@1x.png,\n    /images/blog/2020/muteswan-icons-broken@2x.png 2x\"\n    src=\"/images/blog/2020/muteswan-icons-broken@1x.png\"\n    alt=\"Mute Swan icons (broken)\"\n    width=\"340\"\n    height=\"100\">\n</p>\n\n<p>I could use Bubblewrap again to re-generate the icons but that wouldn’t fix the clipping. I found the offending assets in this directory:</p>\n<pre><code>app/src/main/res</code></pre>\n<p>There is an awful lot of size variations to edit by hand. Has no one heard of vector graphics? Anyway, after some trial and error I learnt that editing them all at once in Android Studio is effortless.</p>\n<p>Control/right-click on the <code>res</code> directory and select <em>“New &gt; Image Asset”</em>.</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\" srcset=\"\n    /images/blog/2020/muteswan-android-studio@1x.png,\n    /images/blog/2020/muteswan-android-studio@2x.png 2x\"\n    src=\"/images/blog/2020/muteswan-android-studio@1x.png\"\n    alt=\"Mute Swan in Android Studio\"\n    width=\"744\"\n    height=\"250\">\n</p>\n\n\n<p>You’ll see this UI:</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\" srcset=\"\n    /images/blog/2020/muteswan-android-studio-icons@1x.png,\n    /images/blog/2020/muteswan-android-studio-icons@2x.png 2x\"\n    src=\"/images/blog/2020/muteswan-android-studio-icons@1x.png\"\n    alt=\"Mute Swan app icons in Android Studio\"\n    width=\"1045\"\n    height=\"725\">\n</p>\n\n<p>In this modal you can configure the <em>“Background Layer”</em>. I entered a solid colour to match my icon. When you click <em>“Next”</em> you’ll see a list of files that will be overwritten — confirm to save the new icons.</p>\n<p>And that’s it!</p>\n<p>The new icons are used in the next build. The app version number should be bumped up. This can be edited in <code>app/build.gradle</code> — or found under <em>“File &gt; Project Structure &gt; Modules &gt; Default Config”</em> tab if you prefer a GUI.</p>\n<h2 id=\"the-fun-continues\">The fun continues…</h2>\n<p>Once a TWA/PWA is built there aren’t many reasons to re-build it. Other than updating icons. The app is still a website and can be updated at will. I pushed <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://muteswan.app/\">my new design</a> live whilst waiting for Google to approve the store release. An app with more than one user might require a more sophisticated, timed update!</p>\n<h3 id=\"test-devices\">Test Devices</h3>\n<p>Another neat thing you can do with the Android dev tools is install an app on a real device via USB.</p>\n<p>I’ve an old Nexus 7, and a new Fire 7 — which feels like the 7 year-old device – both rooted with custom Android ROMs. Developer mode and USB debugging needs to be activated on the device. I don’t think rooting is necessary, that was another project.</p>\n<p>After connecting via USB run:</p>\n<pre><code class=\"language-bash\">adb <span class=\"token function\">install</span> app/release/app-release.apk</code></pre>\n<p>The app is install as it would be via the store. Test away!</p>\n<p>I’ll continue to explore Android Studio and look for other opportunities to improve the PWA experience.</p>\n<h2 id=\"related-articles\">Related articles</h2>\n<ul>\n<li><a href=\"/2020/03/05/bundle-a-pwa-as-an-android-app/\">Bundle a PWA as an Android App</a></li>\n<li><a href=\"/2020/03/27/debugging-a-todo-app/\">Debugging a Todo App</a></li>\n<li><a href=\"/2020/06/01/bubblewrap-twa-pwa-apps-android-studio/\">Bubblewrap Apps in Android Studio</a></li>\n<li><a href=\"/2020/06/08/pwa-web-crypto-encryption-auto-sign-in-redux-persist/\">PWA Encryption and Auto Sign-in</a></li>\n</ul>\n<p>Last updated: June 2020.</p>\n",
  "pageExcerpt": "Bubblewrap is a convenient tool to generate an Android app from a Progressive Web App. I used it to bundle my PWA recently.\nIt’s run from the command line:\nbubblewrap init --manifest \"https://muteswan.app/manifest.webmanifest\"\nBubblewrap generates the build config and assets for the app. Continuing with bubblewrap build results in an .apk if you’ve installed the Android build tools.\nI […]",
  "pageDesc": "There one where I redesign my PWA and dive head first into Android Studio.",
  "pageTitle": "Bubblewrap Apps in Android Studio – David Bushell – Web Design (UK)"
}