{
  "dateUnix": 1591610400000,
  "dateFormatted": "Monday 8 Jun 2020",
  "pageHeading": "PWA Encryption and Auto Sign-in",
  "pagePath": "/2020/06/08/pwa-web-crypto-encryption-auto-sign-in-redux-persist/",
  "innerHTML": "<p><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://muteswan.app/\"><strong>Mute Swan</strong></a> is a progressive web app I’ve been coding for my own amusement. It’s a playground for me to mess around with experimental web standards. Also to remind myself to buy milk.</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\" srcset=\"\n    /images/blog/2020/ms-v7a@1x.png,\n    /images/blog/2020/ms-v7a@2x.png 2x\"\n    src=\"/images/blog/2020/ms-v7a@1x.png\"\n    alt=\"Mute Swan v7\"\n    width=\"360\"\n    height=\"300\">\n</p>\n\n<p>I’ve recently implemented hidden Dropbox backup and sync functionality. With that in place I decided that my grocery list was of the upmost secrecy. What if my Dropbox account was hacked?</p>\n<h2 id=\"encryption\">Encryption</h2>\n<p>Mute Swan uses <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">local storage</a> to persist state data between browser sessions.</p>\n<p>I wrote an asynchronous wrapper for the <code>getItem</code> and <code>setItem</code> methods; encrypting and decrypting respectively. My encrypted local storage interface plugs into <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/rt2zz/redux-persist\">Redux Persist</a><sup>†</sup> as a custom storage engine.</p>\n<p>Encryption is handled by the <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\">Web Crypto API</a>. I’ve used AES-GCM with a key generated from a SHA-256 hash of a text password.</p>\n<p>I begin with the hashing function:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'SHA-256'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>From that the <code>CryptoKey</code> is derived:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">importKey</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'raw'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'AES-GCM'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'encrypt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'decrypt'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">'supersecretpassword'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>With this key, text can be encoded and encrypted:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> iv <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> encrypted <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    iv<span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'AES-GCM'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Buy milk?'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And later decrypted and decoded:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">let</span> decrypted <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> crypto<span class=\"token punctuation\">.</span>subtle<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    iv<span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'AES-GCM'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  key<span class=\"token punctuation\">,</span>\n  encrypted\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndecrypted <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>decrypted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Output should be: \"Buy milk?\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decrypted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Sounds secure, but the default password is stored right in the source code.</p>\n<p>To use a custom password I need to request that before the Redux store can be configured. I mocked up a sign-in form to accept the password. In React I’m mounting the form component at a higher level prior to the Redux provider and persist gate.</p>\n<h2 id=\"auto-sign-in\">Auto sign-in</h2>\n<p>Requesting a password at the start of each session is an annoying experience. I briefly considered how safe it would be to store the password itself in local storage or a JavaScript cookie. Both are susceptible to cross-site scripting and lack any user management. Further research lead me to the <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developers.google.com/web/fundamentals/security/credential-management/retrieve-credentials\">Credential Management API</a>.</p>\n<h4 id=\"auto-sign-in-the-correct-way\">Auto sign-in (the correct way)</h4>\n<p>Chrome provides the best auto sign-in experience. If enabled the password can be retrieved seamlessly without user interaction. A temporary notification pops up and passwords can be managed via the key button.</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\" srcset=\"\n    /images/blog/2020/ms-auto-sign-in@1x.png,\n    /images/blog/2020/ms-auto-sign-in@2x.png 2x\"\n    src=\"/images/blog/ms-auto-sign-in@1x.png\"\n    alt=\"Mute Swan v7 auto sign-in\"\n    width=\"478\"\n    height=\"160\">\n</p>\n\n<p>Passwords can be stored programmatically:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">window<span class=\"token punctuation\">.</span>PasswordCredential</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And retrieved silently:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>navigator<span class=\"token punctuation\">.</span>credentials<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  password<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  mediation<span class=\"token operator\">:</span> <span class=\"token string\">'optional'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Works in Chrome-like browsers. Fails in elsewhere. If the password cannot be retrieved via the method above, or is incorrect, I fall back to a sign-in form.</p>\n<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n  <span class=\"token attr-name\">required</span>\n  <span class=\"token attr-name\">autocomplete</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>current-password<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre>\n<p>Browsers will offer to save the password for future auto-completion.</p>\n<h4 id=\"auto-sign-in-the-hack-way\">Auto sign-in (the hack way)</h4>\n<p>If the browser doesn’t cough up the password immediately the sign-in form is presented. The auto-completed password can be detected with an event:</p>\n<pre><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      ev<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'password'</span> <span class=\"token operator\">&amp;&amp;</span>\n      ev<span class=\"token punctuation\">.</span>inputType <span class=\"token operator\">===</span> <span class=\"token string\">'insertReplacementText'</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Attempt auto sign-in by submitting the form...</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>once<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>If this event is triggered the form can be submitted to attempt an “auto” sign-in. Only try this once because an incorrect password results in an infinite loop!</p>\n<p>This method has noticeable latency and the form will appear briefly. I considered making the form invisible to avoid the UI flash. However, a timeout would be necessary to show the form again if auto-complete didn’t occur, or was not detected. Such a delay seems like the greater evil.</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\"\n    src=\"/images/blog/2020/ms-v7-auto-sign-in-hack.gif\"\n    alt=\"Mute Swan v7 auto sign-in hack\"\n    width=\"360\"\n    height=\"200\">\n</p>\n\n<p>This feels very hacky but it works in Firefox.</p>\n<h3 id=\"fallback\">Fallback</h3>\n<p>Finally, if neither auto sign-in method works, or no password is saved, the form must be submitted manually by the user.</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\" srcset=\"\n    /images/blog/2020/ms-sign-in-form@1x.png,\n    /images/blog/2020/ms-sign-in-form@2x.png 2x\"\n    src=\"/images/blog/ms-sign-in-form@1x.png\"\n    alt=\"Mute Swan v7 sign-in form\"\n    width=\"296\"\n    height=\"105\">\n</p>\n\n<p>Safari is particularly hesitant to auto-fill for me. Hopefully browser support for credential management auto sign-in becomes standard.</p>\n<h2 id=\"and-so\">And so…</h2>\n<p>And so, my grocery list is now encrypted! The browser secures my password between sessions. Keys never leave internal JavaScript memory. Naturally, there’s a more than zero percent chance I’ve done something wrong and my code is entirely exploitable. I’ll continue to learn, test, and iterate.</p>\n<p>At some point I do plan to publish Mute Swan on GitHub. A lot of the functionality is still hidden behind secret flags. It turns out that building user-friendly UI is incredibly time consuming!</p>\n<h2 id=\"related-articles\">Related articles</h2>\n<ul>\n<li><a href=\"/2020/03/05/bundle-a-pwa-as-an-android-app/\">Bundle a PWA as an Android App</a></li>\n<li><a href=\"/2020/03/27/debugging-a-todo-app/\">Debugging a Todo App</a></li>\n<li><a href=\"/2020/06/01/bubblewrap-twa-pwa-apps-android-studio/\">Bubblewrap Apps in Android Studio</a></li>\n<li><a href=\"/2020/06/08/pwa-web-crypto-encryption-auto-sign-in-redux-persist/\">PWA Encryption and Auto Sign-in</a></li>\n</ul>\n<p>Last updated: June 2020.</p>\n<hr>\n<p class=\"p--small\">† Redux Persist updates local storage asynchronously. There is some throttling going on but it basically updates after every state change. I ran some very primitive benchmarks and found that my encryption interface is plenty fast enough; milliseconds, if that.</p>\n",
  "pageExcerpt": "Mute Swan is a progressive web app I’ve been coding for my own amusement. It’s a playground for me to mess around with experimental web standards. Also to remind myself to buy milk.\n\n  \n\n\nI’ve recently implemented hidden Dropbox backup and sync functionality. With that in place I decided that my grocery list was of […]",
  "pageDesc": "There one where paranoia gets the better of me.",
  "pageTitle": "PWA Encryption and Auto Sign-in – David Bushell – Web Design (UK)"
}