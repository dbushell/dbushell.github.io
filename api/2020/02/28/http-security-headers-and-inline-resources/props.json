{
  "dateUnix": 1582884000000,
  "dateFormatted": "Friday 28 Feb 2020",
  "pageHeading": "HTTP Security Headers and Inline Resources",
  "pagePath": "/2020/02/28/http-security-headers-and-inline-resources/",
  "innerHTML": "<p>As it turns out, HTTPS is not the end-all to securing a website.</p>\n<p><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://observatory.mozilla.org/\">Mozilla Observatory</a> and <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://securityheaders.com/\">Security Headers</a> both scan HTTP headers and report back on adherence to, or lack thereof, best practices.</p>\n<p>In my case <em>dbushell.com</em> gets a big fat <strong>“F”</strong>. I’m hosting on GitHub Pages so there is not much I can do except use a <code>&lt;meta&gt;</code> tag (more on that later). <a href=\"/2020/01/27/building-a-pwa-with-netlify-functions/\">I am using Netlify</a> to host a few other websites&thinsp;/&thinsp;PWAs.</p>\n<p>In testing I configured <code>netlify.toml</code> to add:</p>\n<pre><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">headers</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">for</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"/*\"</span>\n\n  <span class=\"token punctuation\">[</span><span class=\"token table class-name\">headers.values</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key property\">X-Frame-Options</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"DENY\"</span>\n    <span class=\"token key property\">X-XSS-Protection</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1; mode=block\"</span>\n    <span class=\"token key property\">X-Content-Type-Options</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"nosniff\"</span>\n    <span class=\"token key property\">Content-Security-Policy</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"default-src 'self'; frame-ancestors 'none'\"</span></code></pre>\n<p>These HTTP headers direct the browser as follows:</p>\n<ol>\n<li><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://infosec.mozilla.org/guidelines/web_security#x-frame-options\">X-Frame-Options</a>: disallow the site from being iframed</li>\n<li><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://infosec.mozilla.org/guidelines/web_security#x-xss-protection\">X-XSS-Protection</a>: add cross-site scripting protection (older browsers)</li>\n<li><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://infosec.mozilla.org/guidelines/web_security#x-content-type-options\">X-Content-Type-Options</a>: only load resources with a correct MIME type</li>\n<li><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://infosec.mozilla.org/guidelines/web_security#content-security-policy\">Content Security Policy</a>: whitelist where resources can be loaded from</li>\n</ol>\n<p>CSP from what I understand is the new “standard” that overrides the first three headers. It provides nuance in directives for each type of resource.</p>\n<p>Naturally, when I deployed this update and refreshed my PWA it was broken. There was no CSS being applied despite the CSS being right there; inlined within a <code>&lt;style&gt;</code> element. This was because the <code>default-src &#39;self&#39;</code> directive only allows same domain sources and blocks inline. I could extend this to read:</p>\n<pre><code>default-src &#39;self&#39;; style-src &#39;unsafe-inline&#39;;</code></pre><p>As the directive suggests this is considered “unsafe”. <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src\">Further research</a> suggests one of the safest and coolest options is to add a cryptographic hash:</p>\n<pre><code>default-src &#39;self&#39;; style-src &#39;sha256-[hash]&#39;;</code></pre><p>With this directive the inline css cannot be altered without breaking the hashed value. This includes any CSS changes I make. For a statically generated site the build process requires an additional step.</p>\n<p>Easy enough to do in Node:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> csso <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csso'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Read CSS source file</span>\n<span class=\"token keyword\">let</span> css <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">stylesheet.css</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Minify the CSS for inlining</span>\ncss <span class=\"token operator\">=</span> csso<span class=\"token punctuation\">.</span><span class=\"token function\">minify</span><span class=\"token punctuation\">(</span>css<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>css<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Generate the hash value</span>\n<span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> crypto\n  <span class=\"token punctuation\">.</span><span class=\"token function\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sha256'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>css<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>From here the CSS is written within a style element <code>&lt;style&gt;${css}&lt;/style&gt;</code> ensuring no additional whitespace between the tags. The CSP header is also updated with the new hash, for example:</p>\n<pre><code>style-src &#39;sha256-QpACKkYqaJasYCFZA51jC7LHJJVCHbb1h0Uc5eMvurQ=&#39;;</code></pre><p>I’m not using a framework or templating engine so a rough find and replace suffices:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">let</span> toml <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">netlify.toml</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntoml <span class=\"token operator\">=</span> toml<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>\n  <span class=\"token regex\">/style-src 'sha256-[^']+?'/</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">style-src 'sha256-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hash<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">netlify.toml</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> toml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>If I had multiple inline sources a more robust solution might be sensible to generate this header. With that my PWA is getting passing grades.</p>\n<p>As for my website hosted on GitHub Pages I would need to use a meta tag:</p>\n<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Content-Security-Policy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span> ... <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Which I have yet to implement. As of writing, my website has quite a lot of inline CSS, JavaScript, and SVG. Not to mention a few external CDN resources. It’s going to take some thinking to implement CSP correctly.</p>\n<p>Another task for the backlog then!</p>\n",
  "pageExcerpt": "As it turns out, HTTPS is not the end-all to securing a website.\nMozilla Observatory and Security Headers both scan HTTP headers and report back on adherence to, or lack thereof, best practices.\nIn my case dbushell.com gets a big fat “F”. I’m hosting on GitHub Pages so there is not much I can do except use […]",
  "pageDesc": "The one where I figure out HTTP security headers and inline resources for my progressive web app.",
  "pageTitle": "HTTP Security Headers and Inline Resources – David Bushell – Web Design (UK)"
}