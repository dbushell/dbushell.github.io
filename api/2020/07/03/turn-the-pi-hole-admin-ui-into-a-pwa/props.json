{
  "dateUnix": 1593770400000,
  "dateFormatted": "Friday 3 Jul 2020",
  "pageHeading": "Turn the Pi-hole Admin Dashboard into a Progressive Web App",
  "pagePath": "/2020/07/03/turn-the-pi-hole-admin-ui-into-a-pwa/",
  "innerHTML": "<p><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://pi-hole.net/\"><strong>Pi-hole</strong></a> describes itself as <em>“A black hole for Internet advertisements”</em>. I think the <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/pi-hole/pi-hole\">GitHub description</a> is more apt:</p>\n<blockquote>\n<p>The Pi-hole® is a DNS sinkhole that protects your devices from unwanted content …</p>\n</blockquote>\n<p>Fewer ads are nice, but tracker and malware blocking at the LAN DNS level is nicer. Pi-hole is the first install of my <a href=\"/2020/07/02/hardware-home-servers-self-hosted-raspberry-pi/\">self-hosted adventure</a>.</p>\n<p>The admin web interface is pretty:</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\"\n    src=\"/images/blog/2020/pihole-dashboard.webp\"\n    title=\"Pi-hole Admin Dashboard © Pi-hole\"\n    alt=\"Pi-hole Admin Dashboard © Pi-hole\"\n    width=\"1080 \"\n    height=\"525\">\n</p>\n\n<p>But it lacks one thing I’m obsessed with; full Progressive Web App support. The ability to <em>install</em> the website as it were.</p>\n<p>I added support myself.</p>\n<p>The mobile phone screenshot below is a before and after:</p>\n<p class=\"b-post__image\">\n  <img loading=\"lazy\" srcset=\"\n    /images/blog/2020/pi-hole-pwa-home-screen@1x.png,\n    /images/blog/2020/pi-hole-pwa-home-screen@2x.png 2x\"\n    src=\"/images/blog/2020/pi-hole-pwa-home-screen@1x.png\"\n    alt=\"Pi-hole shortcut and PWA home screen icons\"\n    width=\"360\"\n    height=\"160\">\n</p>\n\n<p><strong>On the left</strong> is the standard home screen bookmark. Note the ugly Chrome icon-within-an-icon. The bookmark opens a web browser. This is the default “Add to Home screen” experience for Pi-hole – and any website – out of the box.</p>\n<p><strong>On the right</strong> is the progressive web app icon installed with Chrome’s <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developers.google.com/web/fundamentals/integration/webapks\">WebAPK</a>. It looks like a first-class app and opens in chromeless Chrome.</p>\n<p>A little superficial but I want it.</p>\n<h2 id=\"three-step-pi-hole-pwa\">Three step Pi-hole PWA</h2>\n<p>Pi-hole requires <strong>three things</strong> for full PWA support. First you need the admin dashboard running over a secure HTTPS connection. I’m using <a href=\"/2020/07/02/hardware-home-servers-self-hosted-raspberry-pi/\">Traefik with Let’s Encrypt</a> configured to proxy the Pi-hole web server.</p>\n<p>I pointed a spare domain name at my public IP and forwarded ports <code>80</code> and <code>443</code> from my router to my Raspberry Pi. After the TLS certificate was generated by Traefik I closed the firewall and added a custom DNS record in Pi-hole itself to resolve that domain to the RPi’s local IP directly. I don’t want anything accessible to the outside world. I’ll need to re-open the firewall and disable the DNS rule to renew the certificate in a few months. In the meantime, browsers seem happy with the domain resolving to a non-public IP. I didn’t think this would work but it does (for now).</p>\n<p><strong>Second thing</strong> — a change to the Web Manifest file. Pi-hole has one  but it needs a small amendment. Depending on your install you may find the location at:</p>\n<pre><code>/var/www/html/admin/img/favicons/manifest.json</code></pre>\n<p>Ensure the <code>start_url</code> property is set:</p>\n<pre><code class=\"language-json\"><span class=\"token property\">\"start_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/admin/\"</span></code></pre>\n<p><strong>The third and final thing</strong> – a <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">Service Worker</a>. This is a JavaScript file that can do a lot or a little depending on what’s desired. For Pi-hole I’ve erred on the side of caution and written a minimum viable service worker.</p>\n<p>The location:</p>\n<pre><code>/var/www/html/admin/sw.js</code></pre>\n<p>The JavaScript contents:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ver <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">5.0.0</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cacheName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">pihole-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ver<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">install</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  self<span class=\"token punctuation\">.</span><span class=\"token function\">skipWaiting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">activate</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ev<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span><span class=\"token function\">claim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ev<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyList</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>\n        keyList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!==</span> cacheName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fromCache</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateCache</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchAndCache</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response <span class=\"token operator\">||</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">200</span> <span class=\"token operator\">||</span> response<span class=\"token punctuation\">.</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">'basic'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      ev<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span><span class=\"token function\">updateCache</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> allowTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gif'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'png'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'svg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ttf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'otf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'woff2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">!==</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> ext <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allowTypes<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  ev<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">fromCache</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ev<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetchAndCache</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">from cache: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token punctuation\">.</span>pathname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">from fetch: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token punctuation\">.</span>pathname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fetchAndCache</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The service worker only intercepts and caches binary assets (images, fonts, etc). Even those requests are still sent to the server in the background. This offers minor performance benefits whilst avoiding breaking any Pi-hole functionality. Worst case scenario is that I  may have to reload the page for an asset to refresh.</p>\n<p>More importantly, it’s enough to meet the PWA requirements.</p>\n<p>Now that I’ve done this, I wonder if any empty JavaScript file would have been enough? <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://twitter.com/dbushell\">Write in and tell me</a> if you test this before I do!</p>\n<p>Finally, to ensure the service worker is installed I’ve added a <code>&lt;script&gt;</code> to the bottom of <code>footer.php</code> before the closing tags:</p>\n<pre><code>/var/www/html/admin/scripts/pi-hole/php/footer.php</code></pre>\n<pre><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'serviceWorker'</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">.</span>navigator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span>navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/admin/sw.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>With these three things in place the Pi-hole admin dashboard now meets the requirements for PWA installation.</p>\n<p>🍾 yay!</p>\n<p>It’s quite probable that future Pi-hole updates will overwrite my amends. Hence the documentation here. I’d like to open a couple of Github issues and pull requests on the <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/pi-hole/pi-hole\">Pi-hole repo</a> to get this working officially. I’ll do this if I have time to brush up on their developer etiquette. I don’t want to drop a drive-by issue without time to follow up appropriately. The web manifest tweak seems like an easy win. The default service worker would need discussion.</p>\n",
  "pageExcerpt": "Pi-hole describes itself as “A black hole for Internet advertisements”. I think the GitHub description is more apt:\n\nThe Pi-hole® is a DNS sinkhole that protects your devices from unwanted content …\n\nFewer ads are nice, but tracker and malware blocking at the LAN DNS level is nicer. Pi-hole is the first install of my self-hosted adventure.\nThe […]",
  "pageDesc": "There one where I tinker with Pi-hole.",
  "pageTitle": "Turn the Pi-hole Admin Dashboard into a Progressive Web App – David Bushell – Web Design (UK)"
}