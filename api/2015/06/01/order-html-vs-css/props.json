{
  "dateUnix": 1433152800000,
  "dateFormatted": "Monday 1 Jun 2015",
  "pageHeading": "Order: HTML vs CSS",
  "pagePath": "/2015/06/01/order-html-vs-css/",
  "innerHTML": "<p>Content should follow a logical top-to-bottom order within HTML. CSS is used to change the visual presentation of this content across different viewports.</p>\n<p>On small viewports — mobile phones for example — a vertical layout that mimics the HTML order is generally a safe default. For wider viewports it is common to introduce more complex layout that flows LTR (left to right) and TTB (top to bottom).</p>\n<p class=\"p--small p--light\">I’m assuming English language content but the same ideas apply in reverse.</p>\n\n<p>Basic stuff. Design can be a lot more creative.</p>\n<blockquote>\n<p>Compositional flow determines how the eye is led through a design: where it looks first, where it looks next, where the eye pauses, and how long it stays.</p>\n<p class=\"p--small\"><cite>Steven Bradley <a href=\"http://www.smashingmagazine.com/2015/04/29/design-principles-compositional-flow-and-rhythm/\">Design Principles: Compositional Flow And Rhythm</a></cite></p>\n</blockquote>\n<p><strong>What happens when HTML source order differs from CSS presentation order?</strong></p>\n<p>Below I’m going to tackle the technical aspect of this question.</p>\n<h2 id=\"css-layout\">CSS Layout</h2>\n<p>CSS layout is not entirely independent of HTML source order. As a rule of thumb CSS follows the language’s natural flow (LTR / TTB). This can be hard to break.</p>\n<p>By far the cleanest way to change presentation order I’ve seen is to use <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Flexbox</a>. It has a built in <code>order</code> property. <a href=\"http://codepen.io/dbushell/full/rVjoBr/\">See my CodePen</a> (embedded below) for an example that uses multiple fallback techniques to achieve the same results without Flexbox.</p>\n<div class=\"b-post__image\">\n  <iframe height=\"250\" scrolling=\"no\" title=\"Reversing HTML Source Order\" src=\"//codepen.io/dbushell/embed/rVjoBr/?height=150&theme-id=0&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/dbushell/pen/rVjoBr/\">Reversing HTML Source Order</a> by David Bushell (<a href=\"https://codepen.io/dbushell\">@dbushell</a>) on <a href=\"https://codepen.io\">CodePen</a>.</iframe>\n</div>\n\n<p>This demo introduces a three column layout on viewports 640px and wider.</p>\n<p>In the first example I’m using basic floats to create a grid. I’m then progressively enhancing to override <strong>with Flexbox</strong> and change the presentation order. You can toggle Flexbox support on/off to see the default order.</p>\n<p>In the second example I’m using two very different techniques to achieve the same layout <strong>without Flexbox</strong>. This requires negative margins for the horizontal layout, and rarely used table display values for the vertical layout. The CSS is complicated and unintuitive but it works in IE9.</p>\n<p>As you can see life is much easier with Flexbox!</p>\n<p>There are other ways to change presentation order. For a basic two column layout you can simply <code>float</code> the first column <code>right</code> and the second column <code>left</code>. You could also consider <code>position: absolute</code> if an element has known dimensions, using padding or margins on siblings or the parent to make space.</p>\n<p>Know of any other techniques? <a href=\"http://twitter.com/dbushell\">Send me a tweet</a>.</p>\n",
  "pageExcerpt": "Content should follow a logical top-to-bottom order within HTML. CSS is used to change the visual presentation of this content across different viewports.\nOn small viewports — mobile phones for example — a vertical layout that mimics the HTML order is generally a safe default. For wider viewports it is common to introduce more complex layout […]",
  "pageTitle": "Order: HTML vs CSS – David Bushell – Web Design (UK)"
}