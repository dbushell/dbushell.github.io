{
  "dateUnix": 1391433532000,
  "dateFormatted": "Monday 3 Feb 2014",
  "pageHeading": "Simple Grids with CSS Multi-Column Layout",
  "pagePath": "/2014/02/03/simple-grids-with-css-multi-column-layout/",
  "innerHTML": "<p>Last week I began researching CSS layout — what’s achievable with the various spec modules — and <em>grid systems</em> (the myriad of solutions from <a href=\"http://960.gs\">960gs</a> to <a href=\"http://zengrids.com/\">Zen Grids</a>). My notes have quickly grown to thesis-level — I do eventually plan to publish something — but for now here’s a nice example demonstrating what is sure to be my take-away message: <em>keep it simple</em>.</p>\n<p>The image below shows a very minimal design for my website’s footer (menu and copyright notice) as it appears in a small viewport:</p>\n<p class=\"b-post__image\"><a href=\"/images/2014/02/menu-small.png\"><img src=\"/images/2014/02/menu-small.png\" alt=\"Menu layout (small / mobile screen)\"></a></p>\n\n<p>The HTML (sans class attributes for readability) is basic:</p>\n<pre><code class=\"language-markup\">&lt;ul&gt;\n    &lt;li&gt;&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;/about/&quot;&gt;About&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;/services/&quot;&gt;Services&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;/portfolio/&quot;&gt;Portfolio&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;/blog/&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;/contact/&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;&lt;small&gt;Copyright &amp;copy; David Bushell&lt;/small&gt;&lt;/p&gt;\n</code></pre>\n<p>I’m building this website with a “mobile-first” mentality — I’ll assume you know how <em>media queries</em> work — so as the screen width increases I want my footer menu to align to three columns:</p>\n<p class=\"b-post__image\"><a href=\"/images/2014/02/menu-medium.png\"><img src=\"/images/2014/02/menu-medium.png\" alt=\"Menu layout (medium / tablet screen)\"></a></p>\n\n<p>If I was building on top of a framework or grid system I might be inclined to over-think the CSS here. I’d probably have to add extra elements in my mark-up to represent columns; adhering to the grid system’s conventions. That might even force me to split the menu across multiple list elements. Ugly stuff! Let’s keep it simple.</p>\n<p>In this situation <a href=\"http://www.w3.org/TR/css3-multicol/\">CSS Multi-column Layout</a> is the perfect solution.</p>\n<pre><code class=\"language-css\">.footer-menu {\n    column-count: 3;\n    column-gap: 1.75em;\n}\n</code></pre>\n<p>Two declarations are all I need to style the menu. List items will naturally flow into the three columns regardless of how many there may be in future.</p>\n<p>Taking the design further, you can see my desired layout for large screens (aka “desktop”) in the image below. I’ve also overlaid my grid design so you can see alignment.</p>\n<p class=\"b-post__image\"><a href=\"/images/2014/02/menu-large.png\"><img src=\"/images/2014/02/menu-large.png\" alt=\"Menu layout (large / desktop screen)\"></a></p>\n\n<p>I’ve actually designed this website using <em>two</em> grids, one with <em>six columns</em>, and a second with <em>nine columns</em>. Hopefully you can see above how they overlap and work together.</p>\n<p>In this final layout the copyright notice spans 2-of-6 columns (⅓), and the menu spans 4-of-6 columns (⅔). The menu itself — still with multi-column styles applied — is now nested and aligning to the nine column grid (each menu item fitting neatly across 2-of-9 columns).</p>\n<p>Sounds complicated but the CSS isn’t. Here’s one way:</p>\n<pre><code class=\"language-css\">.footer {\n    overflow: hidden;\n}\n.footer-copyright {\n    float: left;\n}\n.footer-menu {\n    float: right;\n    width: 66.666%;\n    padding-left: 0.875em;\n    box-sizing: border-box;\n    column-count: 3;\n    column-gap: 1.75em;\n}\n</code></pre>\n<p>Good old floats!</p>\n<p>This code is quite lazy but it does the job well enough. However, at this stage it is of course possible that following a site-wide coding convention for grids is a better idea. I’ve written a basic intro here: <a href=\"/2013/03/19/on-responsive-layout-and-grids/\">On Responsive Layout and Grids</a> — a “grid system” doesn’t need to be complicated.</p>\n<p>Whether you utilise a pre-made grid system, define one of your own, or just write bespoke layout code like I’ve done above, it is important to bear in mind <em>maintainability</em> and <em>scalability</em>. Writing completely bespoke styles every time on an as-and-when basis isn’t a great idea. But neither is trying to force everything into a single grid system.</p>\n<p>CSS has a lot to offer. Mix and match coding techniques to find the simplest method and abstract common patterns to keep your CSS tidy and reusable.</p>\n<p>  *[HTML]: HyperText Markup Language</p>\n",
  "pageExcerpt": "Last week I began researching CSS layout — what’s achievable with the various spec modules — and grid systems (the myriad of solutions from 960gs to Zen Grids). My notes have quickly grown to thesis-level — I do eventually plan to publish something — but for now here’s a nice example demonstrating what is sure […]",
  "pageTitle": "Simple Grids with CSS Multi-Column Layout – David Bushell – Web Design (UK)"
}