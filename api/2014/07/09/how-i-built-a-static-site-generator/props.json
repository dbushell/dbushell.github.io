{
  "dateUnix": 1404907422000,
  "dateFormatted": "Wednesday 9 Jul 2014",
  "pageHeading": "How I built a Static Site Generator",
  "pagePath": "/2014/07/09/how-i-built-a-static-site-generator/",
  "innerHTML": "<p>I used to build websites with nothing but a text editor.</p>\n<p>Now I have an <a href=\"/2014/06/10/dependency-overload/\">army of tools</a> at my finger tips. When I began to establish <a href=\"/2013/04/30/origin/\">my Grunt tasks</a> I wanted something basic for HTML. My biggest gripe was <em>repetition</em>. The simple concept of “includes” was all I wanted.</p>\n<p>At the time static site generators and templating scared me (still does, in fact). What I wanted was so minimal I was hesitant to invest time into a large set-up. Looking around for options, I liked the way <a href=\"http://hammerformac.com/docs/tags\">Hammer for Mac</a> implemented tags:</p>\n<pre><code class=\"language-markup\">&lt;!-- @include _header.html --&gt;\n</code></pre>\n<p>That looked neat, so as a Friday afternoon project I wrote a cheap and cheerful Grunt task called <a href=\"https://github.com/dbushell/dbushell-Origin/blob/d4d38b2893b372c7620bcc5fd75a649a89766a00/tasks/htmlizr.js\">“htmlizr”</a> to achieve a similar effect. I’ve been using that for almost a year now, stitching together websites big and small.</p>\n<p>There’s been two additions I’ve felt the need for:</p>\n<ul>\n<li>The ability to repeat HTML includes with varying data</li>\n<li>The ability to toggle HTML classes based on context</li>\n</ul>\n<p><strong>Variety:</strong> if a page lists user profiles, for example, I’d include the same pattern multiple times. Variety here would look more realistic and test the integrity of the design.</p>\n<p><strong>Context:</strong> the most common example would be a way to highlight the current page in the main navigation (a single include).</p>\n<h2 id=\"inspiration-inception\">Inspiration &amp; Inception</h2>\n<p>It was Brad Frost’s article on <a href=\"http://bradfrostweb.com/blog/post/designing-with-dynamic-content/\">“Designing with Dynamic Content”</a> that finally pushed me to employ a more robust tool. While his project <a href=\"http://patternlab.io/\">Pattern Lab</a> does more than I want, its use of <a href=\"http://mustache.github.io/\">Mustache</a> templates looked perfect.</p>\n<p>A quick search found <a href=\"https://github.com/haio/grunt-mustache-html\">this Grunt plugin</a> by Zhong Yu which compiles Mustache templates with global and template-specific data.</p>\n<p>To understand exactly how it worked I rewrote the task line-for-line. It was an excellent starting point. I’ve since adapted the plugin to incorporate my personal preferences and a few experimental features.</p>\n<p>Checkout <strong><a href=\"https://github.com/dbushell/dbushell-grunt-mustatic\">dbushell-grunt-Mustatic</a></strong> on GitHub.</p>\n<p class=\"p--small\">I’ve prefixed the name with <code>dbushell-</code> to indicate it’s still very much a work in progress. It’s likely to follow an unpredictable roadmap. All code is under the MIT license!</p>\n\n\n\n\n<h3 id=\"how-does-it-work-\">How does it work?</h3>\n<p>My <code>templates</code> directory follows this structure:</p>\n<pre><code>templates/\n  +-- base.html\n  +-- base.json\n  |\n  +-- pages/\n  |     +-- index.html\n  |     +-- index.json\n  |\n  +-- partials/\n        +-- header.html\n        +-- footer.html\n        +-- nav.html\n\n</code></pre><p>A minimal <code>base.html</code> would look like this:</p>\n<pre><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;{{lang}}&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;{{charset}}&quot;&gt;\n    &lt;title&gt;{{title}}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n{{&gt;content}}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>The three variables: <code>lang</code>, <code>charset</code>, and <code>title</code>, can be first defined in <code>base.json</code>. The <code>title</code> variable can then be overridden in the template-specific <code>index.json</code>.</p>\n<p>This solves my requirement for includes (or “partials”) with varying data, but what about context changes? Mustache is a logic-less templating language. It’s the responsibility of the controller to change data based on context.</p>\n<p>Let’s say my <code>base.json</code> defines navigation like so:</p>\n<pre><code class=\"language-javascript\">&quot;nav&quot;: {\n    &quot;items&quot;: [\n        { &quot;name&quot;: &quot;Home&quot;, &quot;url&quot;: &quot;index.html&quot; },\n        { &quot;name&quot;: &quot;About&quot;, &quot;url&quot;: &quot;about.html&quot; },\n        { &quot;name&quot;: &quot;Design&quot;, &quot;url&quot;: &quot;services/design.html&quot; }\n    ]\n}\n</code></pre>\n<p>My navigation partial might look like this:</p>\n<pre><code class=\"language-markup\">{{#nav}}\n&lt;nav role=&quot;navigation&quot;&gt;\n    {{#items}}\n    &lt;a class=&quot;{{class}}&quot; href=&quot;{{url}}&quot;&gt;{{name}}&lt;/a&gt;\n    {{/items}}\n&lt;/nav&gt;\n{{/nav}}\n</code></pre>\n<p>Notice the additional <code>class</code> variable that is not defined in our data. This can be added automatically as each page is rendered. If the <code>url</code> matches the current page; add an “active” HTML class. I’ve written a <em>pre-render</em> function to address this scenario.</p>\n<p>More context awareness is required for URLs. When the navigation partial is rendered within the services page a link to <code>index.html</code> should actually be <code>../index.html</code> because it’s a level deeper than the homepage.</p>\n<p>One solution might be to write <em>absolute</em> URLs. Simply prefixing with <code>/</code> would allow URLs to resolve properly on any domain at root level, but not locally from <code>file://</code>. My solution was to write a <em>post-render</em> function that converts all relative URLs based on template depth. This assumes all URLs are written relative to root level (like those in my navigation example).</p>\n<h2 id=\"reinventing-the-wheel\">Reinventing the Wheel</h2>\n<p>Now at this point I realise I’m well on the way to building my own static-site generator (of which <a href=\"http://www.staticgen.com/\">myriad already exist</a>). I suppose you could say <a href=\"https://github.com/dbushell/dbushell-Origin\">my Grunt tasks</a> as a whole are exactly that. A DIY solution that’s more flexible and interchangeable.</p>\n<p>It’s entirely possible I could have invested this time to learn an existing tool, but where’s the fun? It’s nice to have personal projects that result in practical uses.</p>\n<p>At the end of the day I’m not forcing these dependencies upon my clients. They want the output — the rendered HTML, CSS, and JavaScript. Even if they need CMS templates in another language I often find it quicker to build a flat website first anyway. How I get there is a matter of personal taste.</p>\n<p>For front-end development I find it rewarding to utilise, develop, and combine small solutions that do just enough and nothing more. As oppose to an all-in-one solution. They often become a brick wall when minor preferences or requirements can’t be addressed.</p>\n<p>What do you use? <a href=\"http://twitter.com/dbushell\">Send me a Tweet!</a></p>\n",
  "pageExcerpt": "I used to build websites with nothing but a text editor.\nNow I have an army of tools at my finger tips. When I began to establish my Grunt tasks I wanted something basic for HTML. My biggest gripe was repetition. The simple concept of “includes” was all I wanted.\nAt the time static site generators and […]",
  "pageTitle": "How I built a Static Site Generator – David Bushell – Web Design (UK)"
}