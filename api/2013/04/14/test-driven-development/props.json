{
  "dateUnix": 1365968197000,
  "dateFormatted": "Sunday 14 Apr 2013",
  "pageHeading": "Test Driven Development",
  "pagePath": "/2013/04/14/test-driven-development/",
  "innerHTML": "<p>I’ve been hacking away at my side project <a href=\"/2013/04/07/macaque-a-new-project/\">Macaque</a> today. It’s quickly becoming the world’s most over-engineered to-do app. At the moment it’s categorising primates:</p>\n<p class=\"b-post__image\"><img src=\"/images/2013/04/macaque-index.png\" alt=\"macaque-index\"></p>\n\n<p>Isn’t it beautiful?</p>\n<p>As you can see, my big ideas for Macaque focus on design but I am building it end-to-end. For the supporting back-end I’ve spent the weekend writing and testing an API. I could have thrown together a diabolical concoction of PHP and MySQL and been done with it. However, since I genuinely plan to use this app, I’ve opted for an ultra-trendy Node solution.</p>\n<h2 id=\"testing-an-api\">Testing an API</h2>\n<p>My app has a very simple RESTful API that interfaces with a <a href=\"http://www.mongodb.org/\">Mongo</a> database. My API can retrieve, edit, and add items to one or more lists. That’s innovation right there. You can follow my <a href=\"https://github.com/dbushell/Macaque\">code progress on GitHub</a>.</p>\n<p>In fairness, It’s probably the least impressive API one could possibly development but that doesn’t make it any easier to test. Even if the front-end wasn’t lacking in functionality at this stage it would be a tedious way to find bugs. Inspired by my old office mates at <a href=\"http://www.uvd.co.uk/blog/a-night-of-tdd-and-full-stack-bdd-review/\">UVd</a> and <a href=\"http://www.browserlondon.com/blog/2013/03/tdd-and-bdd/\">Browser</a>, I’ve spent some time implementing <strong>test driven development</strong> into my workflow.</p>\n<p>For this I’ve used <a href=\"http://visionmedia.github.io/mocha/\">Mocha</a> to write a series of tests for my API. Each test calls the API and then checks the returning data. For example, to make sure <code>/api/lists</code> is returning an array:</p>\n<pre><code class=\"language-javascript\">describe(&#39;Lists&#39;, function() {\n    it(&#39;should return an array of lists&#39;, function(done) {\n        macaqueAPI(&#39;/api/lists&#39;, function(data) {\n            var json = JSON.parse(data);\n            assert.equal(true, Array.isArray(json.lists));\n            assert.equal(false, isNaN(json.lists.length));\n            done();\n        });\n   });\n});\n</code></pre>\n<p>When I run all tests from the command line:</p>\n<p class=\"b-post__image\"><img src=\"/images/2013/04/macaque-mocha-tests.png\" alt=\"Mocha tests\"></p>\n\n<p>Pretty cool, right?</p>\n<p>This effort has already paid dividends when I came to refactor my API to make use of <a href=\"http://mongoosejs.com/\">Mongoose</a> — a library that provides schema, data validation, and generally easier coding. I had to rewrite much of my code but running the tests again gave me instant confidence it was correct.</p>\n<h2 id=\"onwards\">Onwards</h2>\n<p>I’ve already got <a href=\"http://emberjs.com/\">Ember</a> working with the API to output list and task templates. It’s now time to focus on design of the front-end user interface.</p>\n<p>Following my experience with Mocha I’m hooked on automated testing and I look forward to bringing it into the browser with other frameworks.</p>\n<p>Stay tuned for prettier pictures.</p>\n<p><strong>Update: Part 3 —</strong> <a href=\"/2013/04/18/prototyping/\">Prototyping</a>\n<strong>Update: Part 4 —</strong> <a href=\"/2013/04/25/ember-data-and-mongodb/\">Ember Data and MongoDB</a></p>\n",
  "pageExcerpt": "I’ve been hacking away at my side project Macaque today. It’s quickly becoming the world’s most over-engineered to-do app. At the moment it’s categorising primates:\n\n\nIsn’t it beautiful?\nAs you can see, my big ideas for Macaque focus on design but I am building it end-to-end. For the supporting back-end I’ve spent the weekend writing and testing […]",
  "pageTitle": "Test Driven Development – David Bushell – Web Design (UK)"
}