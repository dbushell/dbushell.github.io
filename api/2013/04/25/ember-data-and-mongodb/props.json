{
  "dateUnix": 1366912828000,
  "dateFormatted": "Thursday 25 Apr 2013",
  "pageHeading": "Ember Data and MongoDB",
  "pagePath": "/2013/04/25/ember-data-and-mongodb/",
  "innerHTML": "<p>Macaque lives! If you’ve been following my recent blog posts —</p>\n<ul>\n<li><strong>Part 1:</strong><a href=\"/2013/04/07/macaque-a-new-project/\"> Macaque: A New Project</a></li>\n<li><strong>Part 2:</strong> <a href=\"/2013/04/14/test-driven-development/\">Test Driven Development</a></li>\n<li><strong>Part 3:</strong> <a href=\"/2013/04/18/prototyping/\">Prototyping</a></li>\n</ul>\n<p>— you’ll know I’m building a to-do app with <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"http://nodejs.org/\">Node</a> and <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"http://emberjs.com/\">Ember</a>. Macaque’s development has reached the point where I can use the app <em>itself</em> for issue and feature tracking. If you want to see my plans going forward you’ll have to <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/dbushell/Macaque\">clone the repository</a> and run the app.</p>\n<p>I’ve forked Macaque to use as my personal list app over the next few weeks while I focus on client work. It has a couple of known bugs but nothing that can’t be fixed with a good ol’ refresh. Hopefully when I jump back into development <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/emberjs/data\">Ember Data</a> will be more mature.</p>\n<h2 id=\"ember-data-and-mongodb\">Ember Data and MongoDB</h2>\n<p>Using Ember has been a great learning exercise. After plenty of head scratching and many hours digging around in the source I’m now feeling comfortable with the core concepts.</p>\n<p>If you’re using MongoDB behind your API here’s a few things I’ve learnt:</p>\n<h2 id=\"primary-ids\">Primary IDs</h2>\n<p>MongoDB’s default primary key is an <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"http://docs.mongodb.org/manual/reference/object-id/\">ObjectId</a> in the <code>_id</code> field. Ember Data doesn’t like the underscore. Initially I was using <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"http://mongoosejs.com/docs/guide.html#virtuals\">Mongoose</a> to add virtual <code>id</code> properties. It’s actually a lot easier to manage this client-side by extending the <code>RESTAdapter</code>:</p>\n<pre><code class=\"language-javascript\">Macaque<span class=\"token punctuation\">.</span>RESTAdapter <span class=\"token operator\">=</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span>RESTAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    url<span class=\"token punctuation\">:</span> <span class=\"token string\">'http://localhost:3000'</span><span class=\"token punctuation\">,</span>\n    namespace<span class=\"token punctuation\">:</span> <span class=\"token string\">'api'</span><span class=\"token punctuation\">,</span>\n\n    serializer<span class=\"token punctuation\">:</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span>RESTSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        primaryKey<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'_id'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nMacaque<span class=\"token punctuation\">.</span>Store <span class=\"token operator\">=</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span>Store<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    revision<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n    adapter<span class=\"token punctuation\">:</span> Macaque<span class=\"token punctuation\">.</span>RESTAdapter\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>In here you can also specify the URL and namespace for the API.</p>\n<h2 id=\"serializing-the-primary-id\">Serializing the Primary ID</h2>\n<p>When the API is called to load a record its ID is serialized in the URL. For example, when a list in Macaque is viewed the <code>RESTAdapter</code> loads data from this endpoint:</p>\n<pre><code>http://localhost:3000/api/lists/5175a9dc67a7a40000000003</code></pre><p>On rare occasions this will fail and you’ll see the ID has been serialized in this format: <code>5.1755256517945e</code> — note the numerical notation. What’s going on?</p>\n<p>The answer lies within the <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/emberjs/data/blob/master/packages/ember-data/lib/system/serializer.js\">Serializer</a>:</p>\n<pre><code class=\"language-javascript\"><span class=\"token comment\">/**\n    A hook you can use to normalize IDs before adding them to the\n    serialized representation.\n\n    Because the store coerces all IDs to strings for consistency,\n    this is the opportunity for the serializer to, for example,\n    convert numerical IDs back into number form.\n\n    @param {String} id the id from the record\n    @returns {any} the serialized representation of the id\n  */</span>\n  serializeId<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">+</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n<p>If the ID can be converted to a number in JavaScript it will be. ObjectId’s in MongoDB are a <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"http://docs.mongodb.org/manual/reference/object-id/\">12-byte construct</a>. Usually alpha-numeric and thus “is not a number” — but not always. To fix this problem we can extend the <code>RESTSerializer</code> further:</p>\n<pre><code class=\"language-javascript\">Macaque<span class=\"token punctuation\">.</span>RESTAdapter <span class=\"token operator\">=</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span>RESTAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n    serializer<span class=\"token punctuation\">:</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span>RESTSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* ... */</span>\n        serializeId<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p class=\"p--small u-dim\">(I’ve removed the previous code for brevity.)</p>\n<p>Now our ObjectId values are never inadvertently converted to numbers. With these two changes Ember Data will play nicely with your MongoDB records.</p>\n<h2 id=\"many-more-things-\">Many More Things…</h2>\n<p>This is something I’ve been experimenting with so I’m not convinced it’s actually the correct approach. I thought it was worth sharing nonetheless because I’d imagine it’s a common issue. Anyway, if you have <strong>many-to-many</strong> relationships like I do in Macaque:</p>\n<pre><code class=\"language-javascript\">Macaque<span class=\"token punctuation\">.</span>List <span class=\"token operator\">=</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n    tasks<span class=\"token punctuation\">:</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Macaque.Task'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nMacaque<span class=\"token punctuation\">.</span>Task <span class=\"token operator\">=</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n    lists<span class=\"token punctuation\">:</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Macaque.List'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The API convention is to provide an <code>*_ids</code> array like this <code>GET</code> response for a list record:</p>\n<pre><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"5175786e3351480000000006\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"task_ids\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"517579ab3351480000000008\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"51757a0b3351480000000009\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"51757adc335148000000000a\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"is_hidden\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"modified\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2013-04-22T18:01:00.959Z\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"created\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2013-04-22T17:50:38.000Z\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Macaque Testing\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token string\">\"tasks\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* task data here... */</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In this example I can side-load the three task records by including their data in a <code>tasks</code> object in the JSON root. That’s cool, but problems arise when I edit and save a record in Ember. When I commit the data a <code>PUT</code> request is sent to the API like this:</p>\n<pre><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"5175786e3351480000000006\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"is_hidden\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"modified\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2013-04-22T18:01:00.959Z\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"created\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2013-04-22T17:50:38.000Z\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Macaque Testing\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Note the child task IDs are never sent back to the server.</p>\n<p>From what I understand the <code>hasMany</code> relationships are only serialised in the JSON if you’re specifically embedding all data in every request. You can tell Ember Data to do this…</p>\n<pre><code class=\"language-javascript\">Macaque<span class=\"token punctuation\">.</span>RESTAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Macaque.Lists'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'tasks'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> embedded<span class=\"token punctuation\">:</span> <span class=\"token string\">'always'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nMacaque<span class=\"token punctuation\">.</span>RESTAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Macaque.Tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'lists'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> embedded<span class=\"token punctuation\">:</span> <span class=\"token string\">'always'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>…but it’s not very practical; that’s a lot of data where an array of IDs would suffice. I’ve found a workaround is to extend the <code>RESTSerializer</code> — once again — to include the ID array:</p>\n<pre><code class=\"language-javascript\">Macaque<span class=\"token punctuation\">.</span>RESTAdapter <span class=\"token operator\">=</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span>RESTAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n    serializer<span class=\"token punctuation\">:</span> <span class=\"token constant\">DS</span><span class=\"token punctuation\">.</span>RESTSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* ... */</span>\n        addHasMany<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> record<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> relationship<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\">/_ids$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                hash<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                record<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pluralize</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/_ids$/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    hash<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>This will now include the <code>hasMany</code> relationships in data sent back to the API.</p>\n<p>When I send a new task to the server — including <code>list_ids</code> — I can then update the corresponding list(s) relationships in the database. The server returns the new task with its <code>_id</code> which Ember can confirm. Once the ID arrives I can reload the relevant lists to ensure their <code>task_ids</code> are up-to-date and finally make the task visible.</p>\n<p>I’m not entirely convinced this technique is the best way to maintain many-to-many relationships. I haven’t tested the <code>{ embedded: &#39;always&#39; }</code> technique so I can’t confirm Ember Data actually handles this correctly. Either way it feels overkill.</p>\n<p>Am I doing something wrong, or do you know a better way? <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://twitter.com/dbushell\">Give me a shout on Twitter</a> or comment on <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://news.ycombinator.com/item?id=5608851\">Hacker News</a>.</p>\n",
  "pageExcerpt": "Macaque lives! If you’ve been following my recent blog posts —\n\nPart 1: Macaque: A New Project\nPart 2: Test Driven Development\nPart 3: Prototyping\n\n— you’ll know I’m building a to-do app with Node and Ember. Macaque’s development has reached the point where I can use the app itself for issue and feature tracking. If you want to […]",
  "pageTitle": "Ember Data and MongoDB – David Bushell – Web Design (UK)"
}