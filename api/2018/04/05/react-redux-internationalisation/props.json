{
  "dateUnix": 1522922400000,
  "dateFormatted": "Thursday 5 Apr 2018",
  "pageHeading": "React & Redux - Internationalisation",
  "pagePath": "/2018/04/05/react-redux-internationalisation/",
  "innerHTML": "<p>Internationalisation, i18n, localisation – whatever you prefer – can be tricky if your code does not support the ability to translate user interface text.</p>\n<p>When writing React it’s easy to hard-code UI text right into the JavaScript. This is not good if your website or app needs to support multiple languages. <strong>Even if you only support one language</strong> the technique below allows text to be edited without re-transpiling the React source.</p>\n<p>Here’s an <a href=\"https://codepen.io/dbushell/pen/aYjvaW/\">example on CodePen</a>:</p>\n<div class=\"b-post__image\">\n  <iframe height=\"300\" scrolling=\"no\" title=\"React & Redux - Internationalisation\" src=\"//codepen.io/dbushell/embed/aYjvaW/?height=300&theme-id=0&default-tab=result&embed-version=2\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 100%;\">See the Pen <a href=\"https://codepen.io/dbushell/pen/aYjvaW/\">React &amp; Redux - Internationalisation</a> by David Bushell (<a href=\"https://codepen.io/dbushell\">@dbushell</a>) on <a href=\"https://codepen.io\">CodePen</a>.</iframe>\n</div>\n\n<p>Below I document the technique I’ve been using over:</p>\n<h2 id=\"setting-up-the-state\">Setting up the state</h2>\n<p>I like to adhere to <a href=\"https://redux.js.org/\">Redux</a> principles even for smaller apps. Sure, the boilerplate code can be a little tedious to set up, but it more than pays for itself when debugging.</p>\n<p>I start by adding two properties to my Redux state:</p>\n<pre><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lang\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"i18n\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The <code>lang</code> property is the translation key to be used. It can be anything but mimicking the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang\">HTML lang attribute</a> seems logical. The <code>i18n</code> property maps these keys to text strings for each component name.</p>\n<p>Using my <a href=\"https://codepen.io/dbushell/pen/aYjvaW/\">CodePen example</a>:</p>\n<pre><code class=\"language-json\"><span class=\"token property\">\"i18n\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"en\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Menu\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"desc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"This app is translated into %1$d languages:\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"enButton\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"English\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"deButton\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"German\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"esButton\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spanish\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"de\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Menu\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"desc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Diese App ist in %1$d Sprachen übersetzt:\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"enButton\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Englisch\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"deButton\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Deutsche\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"esButton\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spanisch\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The likelihood of my German being correct is low but you get the idea. If properties like <code>desc</code> need to include variables I format for <a href=\"https://github.com/alexei/sprintf.js\">sprinf</a>. Sprintf is well known and a tiny dependency. This is necessary because sentence structure will change per language. If I were to try and concatenate partial strings and variables within a component it would not work.</p>\n<h2 id=\"mapping-state-to-props\">Mapping state to props</h2>\n<p>Once the translations are ready it’s time to connect. To continue the example, I start with this basic component:</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Menu</span> <span class=\"token operator\">=</span> props <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>This app is translated into <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>langCount<span class=\"token punctuation\">}</span> languages<span class=\"token punctuation\">:</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>English<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>German<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>Spanish<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>All the text is hard-coded and the <code>langCount</code> property is inflexible. Let’s update the component to accept translatable strings:</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Menu</span> <span class=\"token operator\">=</span> props <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>langCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span>enButton<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span>deButton<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span>esButton<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Now we have a stateless functional component ready. We’ll need to create a container to map Redux state to these properties:</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  langCount<span class=\"token punctuation\">:</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> MenuContainer <span class=\"token operator\">=</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'Menu'</span><span class=\"token punctuation\">,</span>\n  mapStateToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Menu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>You’ll notice I’m not using <code>connect()</code> from <a href=\"https://github.com/reactjs/react-redux\">react-redux</a>. Instead I have a similar custom <code>translate()</code> function that accepts the component name as the first parameter. Both functions are HOCs <a href=\"https://reactjs.org/docs/higher-order-components.html\">(higher-order components)</a>.</p>\n<blockquote>\n<p>a higher-order component is a function that takes a component and returns a new component</p>\n</blockquote>\n<p>Here is the full source of <code>translate()</code>:</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> WrappedComponent <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TranslatedComponent</span> <span class=\"token operator\">=</span> props <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// find translations or use defaultProps</span>\n      props<span class=\"token punctuation\">.</span>i18n <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WrappedComponent</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// set a name for debugging</span>\n    TranslatedComponent<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`Translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>WrappedComponent<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">||</span>\n      WrappedComponent<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span>\n      <span class=\"token string\">'Component'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// return HOC connected to state</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n      state <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>mapStateToProps <span class=\"token operator\">?</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        lang<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">,</span>\n        i18n<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>i18n\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      dispatch <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>mapDispatchToProps <span class=\"token operator\">?</span> <span class=\"token function\">mapDispatchToProps</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>TranslatedComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The first parameter <code>name</code> references the object key within the state translation data. This can be anything but I find it useful to match component names for simplicity. Basically the <code>translate()</code> function is a convenient wrapper for <code>connect()</code> that establishing an internationalisation conventions.</p>\n<p>Not all components need to be connected to the Redux state directly. Nor is it practical to do so if a component is reusable and context changes. In such cases I’d connect the parent and pass the relevant i18n properties.</p>\n<p>In the example if the <code>&lt;button&gt;</code> was its own React component I’d do:</p>\n<pre><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CustomButton</span> <span class=\"token attr-name\">label</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span>enButton<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre>\n<p>I’ve kept <code>translate()</code> to a basic implementation here. It can be extended to provide more advanced logic to resolve translations. Or you could provide access to <code>mergeProps</code> of <code>connect()</code> if required.</p>\n<h2 id=\"to-summarise-\">To summarise!</h2>\n<p>This technique achieves the following results:</p>\n<ul>\n<li>all user interface text is abstracted into one place</li>\n<li>UI text is editable without searching through each component</li>\n<li>UI text can be translated into multiple languages</li>\n<li><code>state.lang</code> defines the translation in use</li>\n</ul>\n<p>If you look at <a href=\"https://codepen.io/dbushell/pen/aYjvaW/\">my CodePen demo</a> you can see the Redux actions to change language through <code>mapDispatchToProps</code>.</p>\n<p>How you include <code>state.i18n</code> is up to you:</p>\n<ul>\n<li>import a JSON file and compile it into the JavaScript</li>\n<li>output JSON to (and retrieve from) the global object</li>\n<li>load JSON via an API call</li>\n</ul>\n<p>This is a simple but practical solution. Even if you’re only supporting one language it is beneficial to abstract UI text in this manner. It also allows you to make use of a content management system to provide the translations. You could even try to detect the users default language and set the initial state.</p>\n<p>There are more advanced solutions but I’ve found Redux and this simple abstraction of <code>connect()</code> to be easy and adequate for small apps.</p>\n",
  "pageExcerpt": "Internationalisation, i18n, localisation – whatever you prefer – can be tricky if your code does not support the ability to translate user interface text.\nWhen writing React it’s easy to hard-code UI text right into the JavaScript. This is not good if your website or app needs to support multiple languages. Even if you only support […]",
  "pageDesc": "A simple technique for translatable React user interfaces.",
  "pageTitle": "React & Redux - Internationalisation – David Bushell – Web Design (UK)"
}