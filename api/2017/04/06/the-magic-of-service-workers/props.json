{
  "dateUnix": 1491472800000,
  "dateFormatted": "Thursday 6 Apr 2017",
  "pageHeading": "The Magic of Service Workers",
  "pagePath": "/2017/04/06/the-magic-of-service-workers/",
  "innerHTML": "<p>They’re a thing. <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/service-workers\">Google describes</a> them as a “technical foundation”.</p>\n<p>What I’ve learnt is that a service worker is a JavaScript file. It runs in it’s own little world behind a website. That means it can’t access the DOM. What it can do is proxy network requests and access a storage cache.</p>\n<p>I’m sure they can do more but I’m still learning.</p>\n<h2 id=\"connectivity-issues\">Connectivity Issues</h2>\n<p>If you’ve ever tried to visit a website with no connection you’ll have seen a default browser error page like this:</p>\n<p class=\"b-post__image\"><img src=\"/images/blog/chrome-offline.png\" alt=\"Chrome offline page\"></p>\n\n<p>Who hasn’t, right? This is easily happenable on mobile networks where connections are flaky. Or on poor WiFi networks that balk at more than three devices.</p>\n<p>Maybe the connection is fine but a web server fails to response. Maybe a data center has lost power. Maybe a CDN is leaking your request to another user. Service workers can handle these scenarios better.</p>\n<p>I’ve setup a service worker to cache my web pages and assets a user requests. They remain accessible offline. If the user requests a new page they see:</p>\n<p class=\"b-post__image\"><img src=\"/images/blog/dbushell-offline.png\" alt=\"Service worker offline page\"></p>\n\n<p>Cool, huh?</p>\n<p>That’s of course if the browser supports service workers.</p>\n<p>For a humble portfolio and blog like mine this is a nice-to-have feature. Users can at least return to a page they were reading. For <em>Progressive Web Apps</em> things get a lot more exciting. See the <a href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\">App Shell Model</a> for example.</p>\n<p>A neat trick is to serve a fallback SVG image should any image request fail. Mine in action looks like this:</p>\n<p class=\"b-post__image\"><img src=\"/images/blog/dbushell-offline-image.png\" alt=\"Service worker offline image\"></p>\n\n<p>It’s possible to pre-cache stuff before the user requests it. I’m not sure of the limits. I’m guessing it’s ill advised to cache an entire website. My website attempts to cache top-level HTML to boost perceived performance.</p>\n<p>As of writing Chrome plays nicely. Firefox seems to be doing stuff (shrugs). It’s new technology and a progressive enhancement.</p>\n<p>I can see potential for these things.</p>\n",
  "pageExcerpt": "They’re a thing. Google describes them as a “technical foundation”.\nWhat I’ve learnt is that a service worker is a JavaScript file. It runs in it’s own little world behind a website. That means it can’t access the DOM. What it can do is proxy network requests and access a storage cache.\nI’m sure they can do […]",
  "pageDesc": "They’re a thing. I used one to make my website more accessible offline and faster online.",
  "pageTitle": "The Magic of Service Workers – David Bushell – Web Design (UK)"
}