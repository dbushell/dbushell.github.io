{
  "dateUnix": 1492596000000,
  "dateFormatted": "Wednesday 19 Apr 2017",
  "pageHeading": "TypeScript over React PropTypes",
  "pagePath": "/2017/04/19/typescript-instead-of-react-proptypes/",
  "innerHTML": "<p><a href=\"https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html\">React v15.5.0</a> is here and the <code>React.PropTypes</code> module gives a deprecation warning. Moving forward you’ll find it in it’s own <a href=\"https://github.com/reactjs/prop-types\">package</a>.</p>\n<p>I’ve always used React PropTypes because it seemed like the ‘right way’ to do things. Runtime validation has obvious value but in my experience there are three big negatives to it:</p>\n<ol>\n<li>PropTypes are tedious to write</li>\n<li>PropTypes bloat production code</li>\n<li>Runtime validation is slow and I miss errors</li>\n</ol>\n<p>I solve the first thing with more coffee. I solve the second with Babel transform plugins to drop them from production. Thing three; coffee again perhaps (solution or problem?). There must be a better way, right?</p>\n<h2 id=\"typescript\">TypeScript</h2>\n<p><a href=\"https://www.typescriptlang.org/\">TypeScript</a> “is a typed superset of JavaScript that compiles to plain JavaScript”.</p>\n<p>TypeScript (and <a href=\"https://flow.org/en/\">Flow</a>) has been on my radar for a long time. I’ve yet to learn most of what’s possible but enough to get going. <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">DefinitelyTyped</a> provides the type defintions for React (and myriad other libraries).</p>\n<p>In place of PropTypes I can add a type interface for functional components:</p>\n<pre><code class=\"language-jsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token punctuation\">{</span>\n  text<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n  shadow<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> boolean\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Button<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>SFC<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ButtonProps</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">=</span> props <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token comment\" spellcheck=\"true\">/* [...] */</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Now when I use the <code>&lt;Button/&gt;</code> component my editor shows useful info like missing props and specific types:</p>\n<p class=\"b-post__image\"><img src=\"/images/blog/dbushell-button-typescript.gif\" alt=\"TypeScript in action with React development\"></p>\n\n<p>That sure beats runtime validation.</p>\n<p>TypeScript is more than a React PropTypes replacement. It adds a whole lot to JavaScript and I’m keen to learn it. Not least because my franken-website is a hybrid of TypeScript and Babel compilation. Promise me you won’t look.</p>\n<p>By the way. As you probably know, I’m <a href=\"/2017/02/13/react-as-a-static-site-generator/\">statically generating</a> my website with React. I figured, why not make it universal?</p>\n<p>If you open the dev console and type:</p>\n<pre><code class=\"language-js\">dbushell<span class=\"token punctuation\">.</span><span class=\"token function\">universal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Hit return, it’ll fetch in Preact and stuff. Now have a click around. There should no longer be a page refresh. This is still in the experimental stage but it looks to be working as intended! <a href=\"https://twitter.com/dbushell\">Tweet me opinions @dbushell</a>.</p>\n<p>Check back soon for more on that.</p>\n",
  "pageExcerpt": "React v15.5.0 is here and the React.PropTypes module gives a deprecation warning. Moving forward you’ll find it in it’s own package.\nI’ve always used React PropTypes because it seemed like the ‘right way’ to do things. Runtime validation has obvious value but in my experience there are three big negatives to it:\n\nPropTypes are tedious to write\nPropTypes […]",
  "pageDesc": "I ditched React PropTypes in favour of TypeScript to see how things stacked up.",
  "pageTitle": "TypeScript over React PropTypes – David Bushell – Web Design (UK)"
}